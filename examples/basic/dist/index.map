{"version":3,"sources":["../../../src/simpleAnimation.js","index.js"],"names":["getDecimalFromPercentage","value","parseFloat","checkIfHeight","indexOf","checkIfWidth","msToSeconds","handlePercentage","domTarget","attribute","animateTo","checkedHeight","checkedWidth","Error","scrollHeight","scrollWidth","Main","options","target","animations","defaultDuration","defaultEasing","transitions","styles","forEach","animation","pctDimension","duration","easing","push","style","transition","join","module","exports","document","getElementById","addEventListener","isPercentage"],"mappings":";AAAA,aAwBA,IAAMA,EAA2B,SAAAC,GAASC,OAAAA,WAAWD,GAAS,KAOxDE,EAAgB,SAAAF,GAASA,OAA6B,IAA7BA,EAAMG,QAAQ,WAOvCC,EAAe,SAAAJ,GAASA,OAA4B,IAA5BA,EAAMG,QAAQ,UAOtCE,EAAc,SAAAL,GAAYA,MAAAA,GAAAA,OAAAA,EAAQ,IAAf,MASnBM,EAAmB,SAACC,EAAWC,EAAWC,GACtCC,IAAAA,EAAgBR,EAAcM,GAC9BG,EAAeP,EAAaI,GAC9B,IAACE,IAAkBC,EACb,MAAA,IAAIC,MAAM,qBAEdZ,IAAAA,EAAQU,EACVH,EAAUM,aACVN,EAAUO,YACJd,MAAAA,GAAAA,OAAAA,EAAQD,EAAyBU,GAA3C,OAOEM,EAAO,SAACC,GAENC,IAAAA,EAIAD,EAJAC,OACAC,EAGAF,EAHAE,WAGAF,EAAAA,EAFAG,gBAAAA,OAAkB,IAAA,EAAA,IAJA,EAMlBH,EAAAA,EADAI,cAAAA,OAAgB,IAAA,EAAA,SALE,EAOhBC,EAAc,GACdC,EAAS,GACfJ,EAAWK,QAAQ,SAACC,GAEZhB,IAAAA,EAIAgB,EAJAhB,UAIAgB,EAAAA,EAHAC,aAAAA,OAAe,IAAA,GAHW,EAM1BD,EAAAA,EAFAE,SAAAA,OAAWP,IAAAA,EAAAA,EAJe,EAM1BK,EAAAA,EADAG,OAAAA,OAASP,IAAAA,EAAAA,EALiB,EAOzBX,EAAae,EAAbf,UAELA,EAAYgB,EACRnB,EAAiBW,EAAQT,EAAWC,GACpCA,EAEJa,EAAOM,KAAK,CACRpB,UAAAA,EACAC,UAAAA,IAEJY,EAAYO,KAAQpB,GAAAA,OAAAA,EAAaH,KAAAA,OAAAA,EAAYqB,GAAaC,KAAAA,OAAAA,MAE9DV,EAAOY,MAAMC,WAAaT,EAAYU,OACtCT,EAAOC,QAAQ,SAACM,GACZZ,EAAOY,MAAMA,EAAMrB,WAAaqB,EAAMpB,aAI9CuB,OAAOC,QAAUlB;;ACtGjB,aAFA,IAAA,EAAA,EAAA,QAAA,iCAEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAAmB,SAASC,eAAe,UAAUC,iBAAiB,QAAS,WAClDpB,IAAAA,EAAU,CACZC,OAAQiB,SAASC,eAAe,OAChCjB,WAAY,CACR,CACIV,UAAW,QACXC,UAAW,OACXiB,SAAU,IACVC,OAAQ,UACRU,cAAc,GAElB,CACI7B,UAAW,UACXC,UAAW,IAGnBU,gBAAiB,IACjBC,cAAe,aAGDJ,EAAAA,EAAAA,SAAAA","file":"index.map","sourceRoot":"../src","sourcesContent":["'use strict';\n/**\n @typedef options\n @type {Object}\n @property {DOMnode} target The DOM Node to animate.\n @property {animation[]} animations An array of the properties that will be animated, see Animations. At least one property required.\n @property {number=} [defaultDuration=250] The default animation duration.\n @property {string=} [defaultEasing=linear] The default CSS easing type.\n */\n/**\n @typedef animation\n @type {Object}\n @property {string} attribute The CSS Attribute to animate.\n @property {various} animateTo The value the element animates to.\n @property {number=} [duration=defaultDuration] The default CSS easing type.\n @property {string=} [easing=defaultEasing] The default CSS easing type.\n @property {boolean=} [pctDimension=false] The default CSS easing type.\n */\n/**\n * Get a decimal value from a percentage string.\n * @function\n * @param {string} value - The percentage as string.\n * @returns {number} the percentage as decimal number.\n */\nconst getDecimalFromPercentage = value => parseFloat(value) / 100;\n/**\n * Check if the provided string contains height.\n * @function\n * @param {string} value - The string to test.\n * @returns {boolean} the result as boolean.\n */\nconst checkIfHeight = value => value.indexOf('height') !== -1;\n/**\n * Check if the provided string contains width.\n * @function\n * @param {string} value - The string to test.\n * @returns {boolean} the result as boolean.\n */\nconst checkIfWidth = value => value.indexOf('width') !== -1;\n/**\n * Convert miliseconds to seconds and add a 's' at the end.\n * @function\n * @param {number} value - The number to convert\n * @returns {string} the result as string with a 's' at the end.\n */\nconst msToSeconds = value => `${value / 1000}s`;\n/**\n * Converts the given percentage to pixel equvalent.\n * @function\n * @param {DOMnode} domTarget The DOM Node to get the height and width from.\n * @param {string} attribute CSS attribute to check if it contains height or width.\n * @param {string} animateTo The string with the end percentage.\n * @returns {string} the result as string with 'px' added.\n */\nconst handlePercentage = (domTarget, attribute, animateTo) => {\n    const checkedHeight = checkIfHeight(attribute);\n    const checkedWidth = checkIfWidth(attribute);\n    if (!checkedHeight && !checkedWidth) {\n        throw new Error('Invalid direction');\n    }\n    const value = checkedHeight ?\n        domTarget.scrollHeight :\n        domTarget.scrollWidth;\n    return `${value * getDecimalFromPercentage(animateTo)}px`;\n};\n/**\n * Entry point of the library\n *\n * @returns {options} The animation function\n */\nconst Main = (options) => {\n    const {\n        target,\n        animations,\n        defaultDuration = 250,\n        defaultEasing = 'linear',\n    } = options;\n    const transitions = [];\n    const styles = [];\n    animations.forEach((animation) => {\n        const {\n            attribute,\n            pctDimension = false,\n            duration = defaultDuration,\n            easing = defaultEasing,\n        } = animation;\n        let {animateTo} = animation;\n\n        animateTo = pctDimension ?\n            handlePercentage(target, attribute, animateTo) :\n            animateTo;\n\n        styles.push({\n            attribute,\n            animateTo,\n        });\n        transitions.push(`${attribute} ${msToSeconds(duration)} ${easing}`);\n    });\n    target.style.transition = transitions.join();\n    styles.forEach((style) => {\n        target.style[style.attribute] = style.animateTo;\n    });\n};\n\nmodule.exports = Main;\n","import simpleAnimationJs from '../../../src/simpleAnimation';\n\ndocument.getElementById('button').addEventListener('click', () => {\n    const options = {\n        target: document.getElementById('div'),\n        animations: [\n            {\n                attribute: 'width',\n                animateTo: '100%',\n                duration: 200,\n                easing: 'ease-in',\n                isPercentage: true\n            },\n            {\n                attribute: 'opacity',\n                animateTo: 1\n            }\n        ],\n        defaultDuration: 1000,\n        defaultEasing: 'ease-out'\n    };\n\n    simpleAnimationJs(options);\n});\n"]}